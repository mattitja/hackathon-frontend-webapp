/* tslint:disable */
/* eslint-disable */
/**
 * Agile Wars
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CoordinateDto } from './CoordinateDto';
import {
    CoordinateDtoFromJSON,
    CoordinateDtoFromJSONTyped,
    CoordinateDtoToJSON,
} from './CoordinateDto';
import type { EventDto } from './EventDto';
import {
    EventDtoFromJSON,
    EventDtoFromJSONTyped,
    EventDtoToJSON,
} from './EventDto';
import type { WeaponDto } from './WeaponDto';
import {
    WeaponDtoFromJSON,
    WeaponDtoFromJSONTyped,
    WeaponDtoToJSON,
} from './WeaponDto';

/**
 * 
 * @export
 * @interface FightEventDto
 */
export interface FightEventDto extends EventDto {
    /**
     * 
     * @type {string}
     * @memberof FightEventDto
     */
    playerId1: string;
    /**
     * 
     * @type {WeaponDto}
     * @memberof FightEventDto
     */
    playerWeapon1: WeaponDto;
    /**
     * 
     * @type {string}
     * @memberof FightEventDto
     */
    playerId2: string;
    /**
     * 
     * @type {WeaponDto}
     * @memberof FightEventDto
     */
    playerWeapon2: WeaponDto;
    /**
     * 
     * @type {CoordinateDto}
     * @memberof FightEventDto
     */
    position: CoordinateDto;
    /**
     * 
     * @type {string}
     * @memberof FightEventDto
     */
    winnerId?: string;
}

/**
 * Check if a given object implements the FightEventDto interface.
 */
export function instanceOfFightEventDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "playerId1" in value;
    isInstance = isInstance && "playerWeapon1" in value;
    isInstance = isInstance && "playerId2" in value;
    isInstance = isInstance && "playerWeapon2" in value;
    isInstance = isInstance && "position" in value;

    return isInstance;
}

export function FightEventDtoFromJSON(json: any): FightEventDto {
    return FightEventDtoFromJSONTyped(json, false);
}

export function FightEventDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): FightEventDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        ...EventDtoFromJSONTyped(json, ignoreDiscriminator),
        'playerId1': json['playerId1'],
        'playerWeapon1': WeaponDtoFromJSON(json['playerWeapon1']),
        'playerId2': json['playerId2'],
        'playerWeapon2': WeaponDtoFromJSON(json['playerWeapon2']),
        'position': CoordinateDtoFromJSON(json['position']),
        'winnerId': !exists(json, 'winnerId') ? undefined : json['winnerId'],
    };
}

export function FightEventDtoToJSON(value?: FightEventDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        ...EventDtoToJSON(value),
        'playerId1': value.playerId1,
        'playerWeapon1': WeaponDtoToJSON(value.playerWeapon1),
        'playerId2': value.playerId2,
        'playerWeapon2': WeaponDtoToJSON(value.playerWeapon2),
        'position': CoordinateDtoToJSON(value.position),
        'winnerId': value.winnerId,
    };
}

