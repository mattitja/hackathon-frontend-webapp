/* tslint:disable */
/* eslint-disable */
/**
 * Agile Wars
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
     ErrorEventDtoFromJSONTyped,
     FightEventDtoFromJSONTyped,
     GameStartEventDtoFromJSONTyped,
     GameEndEventDtoFromJSONTyped,
     GameStartEventDtoFromJSONTyped,
     HealthUpdateEventDtoFromJSONTyped,
     InventoryUpdateEventDtoFromJSONTyped,
     JoinEventDtoFromJSONTyped,
     KillEventDtoFromJSONTyped,
     MovementEventDtoFromJSONTyped,
     NextTurnEventDtoFromJSONTyped
} from './index';

/**
 * 
 * @export
 * @interface EventDto
 */
export interface EventDto {
    /**
     * 
     * @type {string}
     * @memberof EventDto
     */
    eventType: string;
    /**
     * 
     * @type {number}
     * @memberof EventDto
     */
    eventId: number;
    /**
     * 
     * @type {string}
     * @memberof EventDto
     */
    gameId: string;
}

/**
 * Check if a given object implements the EventDto interface.
 */
export function instanceOfEventDto(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "eventType" in value;
    isInstance = isInstance && "eventId" in value;
    isInstance = isInstance && "gameId" in value;

    return isInstance;
}

export function EventDtoFromJSON(json: any): EventDto {
    return EventDtoFromJSONTyped(json, false);
}

export function EventDtoFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventDto {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    if (!ignoreDiscriminator) {
        if (json['eventType'] === 'ErrorEvent') {
            return ErrorEventDtoFromJSONTyped(json, true);
        }
        if (json['eventType'] === 'FightEvent') {
            return FightEventDtoFromJSONTyped(json, true);
        }
        if (json['eventType'] === 'GameCreatedEvent') {
            return GameStartEventDtoFromJSONTyped(json, true);
        }
        if (json['eventType'] === 'GameEndEvent') {
            return GameEndEventDtoFromJSONTyped(json, true);
        }
        if (json['eventType'] === 'GameStartEvent') {
            return GameStartEventDtoFromJSONTyped(json, true);
        }
        if (json['eventType'] === 'HealthUpdateEvent') {
            return HealthUpdateEventDtoFromJSONTyped(json, true);
        }
        if (json['eventType'] === 'InventoryUpdateEvent') {
            return InventoryUpdateEventDtoFromJSONTyped(json, true);
        }
        if (json['eventType'] === 'JoinEvent') {
            return JoinEventDtoFromJSONTyped(json, true);
        }
        if (json['eventType'] === 'KillEvent') {
            return KillEventDtoFromJSONTyped(json, true);
        }
        if (json['eventType'] === 'MovementEvent') {
            return MovementEventDtoFromJSONTyped(json, true);
        }
        if (json['eventType'] === 'NextTurnEvent') {
            return NextTurnEventDtoFromJSONTyped(json, true);
        }
    }
    return {
        
        'eventType': json['eventType'],
        'eventId': json['eventId'],
        'gameId': json['gameId'],
    };
}

export function EventDtoToJSON(value?: EventDto | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'eventType': value.eventType,
        'eventId': value.eventId,
        'gameId': value.gameId,
    };
}

